#version 430

layout (local_size_x = 32, local_size_y = 32) in;
layout (binding = 0, rgba8) uniform image2D resultImage;

layout(push_constant) uniform pushed_params {
  uint resolution_x;
  uint resolution_y;
  float time;
  float mouse_x;
  float mouse_y;
} pushed_params_t;

float hash(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);
}


float interpolate(float a, float b, float t) {
    return a + t * (b - a);
}


float smoothNoise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    
    float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));
    
    vec2 u = f * f * (3.0 - 2.0 * f);
    return interpolate(interpolate(a, b, u.x), interpolate(c, d, u.x), u.y);
}


float perlinNoise(vec2 p) {
    float value = 0.0;
    float amplitude = 0.5;
    for (int i = 0; i < 6; i++) {
        value += amplitude * smoothNoise(p);
        p *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}


void main() {
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    vec2 tmp = uv;
    vec2 iResolution = vec2(pushed_params_t.resolution_x, pushed_params_t.resolution_y);
    tmp = tmp * 2.0 - 1.0;
    tmp.x *= iResolution.x / iResolution.y;


    float noiseValue = perlinNoise(tmp * 3.0);


    vec3 color = mix(vec3(0.0, 0.0, 0.2), vec3(0.5, 0.6, 1.0), noiseValue);

    imageStore(resultImage, uv, vec4(color, 0.0));
}